<%- include('../partials/user-sidenav'); -%>

  
<!-- Main content -->
<div class="main-content" id="panel">
    <!-- Topnav -->
    <div class="container-fluid py-3 bg-primary top-padding" style="border-bottom:0.0625rem solid #e9ecef33 !important;" >
        <div class="row align-items-center">
            <div class="col col-lg-auto text-center text-sm-left">
                <h5 style="font-family: 'LakeShore', sans-serif" class="h2 text-white d-inline-block mb-0 custom-heading">Exam center</h5>
            </div>

            <div class="m-3 w-100 text-danger" style="text-align:center;position:relative;">
                <hr>
                <h5 class="text-secondary">All warnings will be displayed here</h5>
                <div id="output">
                    <h2 style="color: white;" 
                    id="text_from_script">
                </h2>
                 </div>
            </div>
            <button id="demo" onclick="isTestStartedFunc()">Start</button>
            <button id="demo" onclick="endTest()">End</button>

            <div class="mx-auto mb-0 text-center"> 
                <div class="container">
                    <% if(error && error.length > 0){ %>
                    <div class="alert alert-danger" role="alert">
                      <%= error %>
                    </div>
                    <% } %> <% if(success && success.length > 0){ %>
                    <div class="alert alert-success" role="alert">
                      <%= success %>
                    </div>
                    <% } %> <% if(warning && warning.length > 0){ %>
                    <div class="alert alert-warning" role="alert">
                      <%= warning %>
                    </div>
                    <% } %> <% if(info && info.length > 0){ %>
                    <div class="alert alert-info" role="alert">
                      <%= info %>
                    </div>
                    <% } %>
                  </div>
                <% if(errorMsg && errorMsg.length > 0){ %>
                    <div class="alert alert-danger fade show " role="alert">
                    <span class="alert-text mr-2">
                        <%= errorMsg %>
                    </span>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <% } %>

                <% if(successMsg && successMsg.length > 0){ %>
                <div class="alert alert-success fade show " role="alert">
                    <span class="alert-icon"><i class="ni ni-like-2"></i></span>
                    <span class="alert-text mr-2"><strong>Success!</strong>
                        <%= successMsg %>
                    </span>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <br>
                <% } %>
            </div>
            <!-- 
            <div class="col-right ml-auto mr-3  d-sm-block">
                <div class="media align-items-center">
                    <span class="avatar avatar-sm rounded-circle" >
                        <img alt="" src="../../Python/uploads/1234.png" style="width:max-content">
                    </span>
                    <div class="media-body  ml-2  d-none d-lg-block">
                        <h4 class="mb-0  " style="color: white;font-family:'Lobster', cursive;">Welcome
                            <b><%=user.name%></b>
                        </h4>
                    </div>
                </div>
            </div>
            -->
        </div>
    </div>
    
    <!-- Header -->
    <div class="col-md-10" style="color: white;">
        <br>
        <% if(questions!=null) { %>

            <% for(let i=0; i < questions[0].questions.length; i++) { %> 
        <div  style="width: 100%;color: black;  background-color: #f1f1f1;" class="card">
        <form action="/test/submit-exam/<%=tests%>" method="post"> 
            <div>
                <div class="card-body">
                    <h5 class="card-title" style="color: black;">(Q<%=i%>) <%= questions[0].questions[i].questionText%></h5>
                </div>
                <div>
                    <div>
                        <input type="radio" name="<%=i%>"  id="" value="A"> <%= questions[0].questions[i].options[0] %>
                    </div>
                    <div>
                        <input type="radio" name="<%=i%>"  id="" value="B"> <%= questions[0].questions[i].options[1] %>
                    </div>  
                    <div>
                        <input type="radio" name="<%= i%>"  id="" value="C"> <%= questions[0].questions[i].options[2] %>
                    </div>
                    <div>
                        <input type="radio" name="<%= i%>"  id="" value="D"> <%= questions[0].questions[i].options[3] %>
                    </div>
                </div>
                       
            </div>
            
            </div>
            <% } %>      
            <button class="btn btn-success mb-3" >Submit</button>
           

        </form>
    </div>
    <div class="col-md-4">
   <video id="video"  class="float" autoplay></video>

    
    </div>
    <% } %>      

 

</div>

<style>
    
    .float{
        position:fixed;
        width:250px;
        height:200px;
        bottom:40px;
        right:40px;
        color:#FFF;
        border-radius:10px;
        text-align:center;
        font-size:30px;
        box-shadow: 2px 2px 3px #999;
        z-index:100;
    }
</style>


<!-- Require the peer dependencies of face-landmarks-detection. -->
<script src="https://unpkg.com/@tensorflow/tfjs-core@2.4.0/dist/tf-core.js"></script>
<script src="https://unpkg.com/@tensorflow/tfjs-converter@2.4.0/dist/tf-converter.js"></script>

<!-- You must explicitly require a TF.js backend if you're not using the tfjs union bundle.
<script src="https://unpkg.com/@tensorflow/tfjs-backend-webgl@2.4.0/dist/tf-backend-webgl.js"></script> -->
<!-- Alternatively you can use the WASM backend: <script src="https://unpkg.com/@tensorflow/tfjs-backend-wasm@2.4.0/dist/tf-backend-wasm.js"></script> -->

<!-- Require face-landmarks-detection itself. -->
<script src="https://unpkg.com/@tensorflow-models/face-landmarks-detection@0.0.1/dist/face-landmarks-detection.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"> </script>

<!-- Import @tensorflow/tfjs-core -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core"></script>

<!-- Adds the WebGL backend to the global backend registry -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgl"></script>

<!-- Import @tensorflow/tfjs-core -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core"></script>

<!-- Adds the CPU backend to the global backend registry -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-cpu"></script>

<!-- Load TensorFlow.js. This is required to use coco-ssd model. -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"> </script>
<!-- Load the coco-ssd model. -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"> </script>

<script>
    
  //  import "@tensorflow/tfjs-backend-cpu";
   /// import "@tensorflow/tfjs-backend-webgl";
   // import * as cocoSsd from "@tensorflow-models/coco-ssd";
   // import * as faceLandmarksDetection from "@tensorflow-models/face-landmarks-detection";
    // DONE import io from "socket.io-client";
   
  //  import jwt from 'jsonwebtoken';

    // -- video
    
    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    const constraints={
        audio:false,
        video:true
    };
  
    async function init(){

        try{

            const stream= await navigator.mediaDevices.getUserMedia(constraints);
            handleSuccess(stream);
            navigator.permissions.query({name: 'camera'})
            .then((permissionObj) => {
             console.log(permissionObj.state);
            })
            .catch((error) => {
             console.log('Got error :', error);
            })
        }
        catch(e){

        }
    }
    function handleSuccess(stream){
        window.stream=stream;
        video.srcObject=stream;

    }
    init();
// 
    /* display warnings 
    let name = 'sanyam'
    let heading = document
        .getElementById('text_from_script');

    heading.innerText = name;
    name = "Mr. " + name;
    let heading_man = document.getElementById(
            'text_from_script_manipulated');
    heading_man.innerText = name;*/
    // 

        function isTestStartedFunc() {
            let $ = this;
            document.addEventListener('visibilitychange', function(){
                if(document.visibilityState === "hidden"){
                    $.endTest();
                    $.flagged = true;
                    $.reason = "User tried to switch tabs";
                }
            });
            document.onkeypress = function(evt){console.log(evt)};
            document.documentElement.requestFullscreen().then(()=>{
                $.isTestStarted = true;
                $.startTest();
                console.log('isteststarted',this.isTestStarted);
                this.startedAt = new Date();
            }).catch(err => {
                alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
            });
        }

       function calculateError(iris) {
            let sumX = -iris[0][0];
            let sumY = -iris[0][1];
            iris.slice(1,5).forEach(point => {
                sumX += point[0]/4;
                sumY += point[1]/4;
            })
            console.log("iris",Math.pow(sumX,2)+Math.pow(sumY,2),0.5)
            return Math.pow(Math.pow(sumX,2)+Math.pow(sumY,2),0.5)
        } 
        
        function endTest(){
            document.exitFullscreen()
            console.log(this.questions);
            this.endedAt = new Date();
            this.testEnded = true;
            try{
              this.endUpload();
            } catch(err){
                console.log(err);
            }
            this.stream.getTracks().forEach(function(track) {
                track.stop();
            });
            clearInterval(this.timeInterval);
            const answers = this.questions.map(q => {
                return q.answer;
            })
            const token = localStorage.getItem('token').split(' ')[1];
            console.log(token);
            const tokenBody = jwt.decode(token);
            console.log(tokenBody);
            const body = {
                userId: tokenBody.id,
                logs: this.logs,
                answers: answers,
                testStartedAt: this.startedAt,
                testCompletedAt: this.endedAt,
                flagged: this.flagged,
                reason: this.reason
            }
            const response =  Api.submitTest(body.userId,this.test._id,body);
            console.log(response);
            this.$router.push("/");
            //API CALL HERE TO SUBMIT LOGS AND RESPONSES
        }
        
        function handleDataAvailable(event) {
            let $ = this;
            if (event.data.size > 0) {
                if(this.socket.connected){
                this.socket.emit("data_available", {
                    methodName: "proctoring",
                    room: $.test._id,
                    userId: $.userId,
                    socketId: $.socketId,
                    upload:true,
                    chunk: event.data
                });
                } else {
                    alert('Socket disconnnected! Some error occured. Please retry the upload')
                    this.mediaRecorder.stop();
                }
            } else {
                // ...
            }
        }
        function endUpload() {
            let $ = this;
            console.log('upload ended');
            this.mediaRecorder.stop();
            this.uploadEnded = true;
            this.socket.emit("leave-upload", {
                methodName: "proctoring",
                room: $.test._id,
                userId: $.userId,
                socketId: $.socketId,
                upload:true,
                socketId: $.socketId 
            });
        } 

        function startTest(){
            console.log("...",faceLandmarksDetection)
            let $ = this;
            $.isLoading = true;
            console.log("...",$.isLoading)
            const hdConstraints = {
                video: true
            };
            //const video = document.getElementById('video');
          
            const video = document.querySelector('video');
            console.log("...",video)
            Promise.all([
                faceLandmarksDetection.load(faceLandmarksDetection.SupportedPackages.mediapipeFacemesh),
                cocoSsd.load()
            ]).then(result => {
               console.log("snayam");
                const facePredict = async () => {
                    const predictions = await result[0].estimateFaces({
                        input: document.querySelector("video")
                    });
                    console.log(predictions)
                    if(!predictions.length) return {lookedAway:true,numberOfPeople:predictions.length,confidence:0};
                    const leftCheek = predictions[0].annotations.leftCheek[0];
                    const midwayBetweenEyes = predictions[0].annotations.midwayBetweenEyes[0];
                    const noseTip = predictions[0].annotations.noseTip[0];
                    const leftIrisError = this.calculateError(predictions[0].annotations.leftEyeIris);
                    const rightIrisError = this.calculateError(predictions[0].annotations.rightEyeIris);
                    console.log( leftIrisError, rightIrisError);
                    let lookedAway = false;
                    if(leftIrisError+rightIrisError>0.15) {
                        lookedAway = true;
                    }
                    if (leftCheek[2] >= 18 || leftCheek[2] <= -18) {
                        lookedAway = true;
                    } else if (midwayBetweenEyes[2] >= 5 || midwayBetweenEyes[2] <= -20 ) {
                        lookedAway = true;
                    } else if (noseTip[2] > -18) {
                        lookedAway = true;
                    } else {
                        lookedAway = false;
                    }
                    return {lookedAway,numberOfPeople:predictions.length,confidence:predictions[0].faceInViewConfidence};
                }
                const mobilePredict = async () => {
                    const predictions = await result[1].detect(document.querySelector("video"));
                    return {mobile:predictions.some(prediction => prediction.class === 'cell phone')};
                }
                const predict = () => {
                    return Promise.all([facePredict(),mobilePredict()])
                        .then(result => {
                            return {
                                ...result[0],
                                ...result[1]
                            }
                        })
                }
                const startPrediction = async() => {
                    const result = await predict();
                    if(!this.logs[this.time])this.logs[this.time]=[0,0,0,0];
                    this.logs[this.time][0] += result.lookedAway?1:0;
                    this.logs[this.time][1] += result.numberOfPeople>1?1:0;
                    this.logs[this.time][2] += result.confidence<0.8?1:0;
                    this.logs[this.time][3] += result.mobile?1:0;
                    if(result.lookedAway||result.confidence<0.8) $.warning = 'Please look the screen ';
                    else $.warning = '';
                    if(result.mobile) $.warning += 'Using Mobile is not Allowed ';
                    else $.warning += '';
                    if(result.numberOfPeople>1) $.warning += 'More than 1 people ';
                    else $.warning += '';
                    // if(result.lookedAway ||  result.numberOfPeople>1 ||  result.confidence<0.8 || result.mobile){
                    //     $.continuousFlags += 1;
                    // } else {
                    //     $.continuousFlags = 0;
                    // }
                    // if($.continuousFlags>25){
                    //     $.beep.start();
                    // }else{
                    //     $.beep.stop();
                    // }
                    if(!this.testEnded)requestAnimationFrame(startPrediction);
                }
                let ss = $.socket;
                ss.emit("subscribe-upload", {
                    methodName: "proctoring",
                    room: $.test._id,
                    userId: $.userId,
                    socketId: $.socketId, 
                    upload:true
                });
                let mediaRecorder = new MediaRecorder($.stream);
                $.mediaRecorder = mediaRecorder;
                $.mediaRecorder.start(1000);
                $.mediaRecorder.ondataavailable = (event)=>$.handleDataAvailable(event); 
                $.timeInterval = setInterval(()=>{
                    $.time += 1;
                }, 60*1000);
                startPrediction();
                $.isLoading = false;
            }).catch(err => console.log("error hai!!",err));
        }
        
           
/*
    if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
     navigator.mediaDevices.getUserMedia({ video: true }).then(function(stream) {
     video.src = window.URL.createObjectURL(stream);
     video.play();
     });
    }
 
  
//<video class="float" id="webcam" autoplay playsinline></video>
//<canvas id="canvas" class="d-none"></canvas>
//<video id="video_camera">.</video><br />

     //   export default{
     //       methods:{},
    //    mounted(){
  /*       const video = document.querySelector('video').play();
        video.play();
        const webcamElement = document.getElementById('webcam');
        const canvasElement = document.getElementById('canvas');
        const webcam = new Webcam(webcamElement, 'image', canvasElement, null);
        this.webcam = webcam;
        console.log("webcam",webcam);
      
       // document.getElementById('vid').play();
        navigator.mediaDevices.getUserMedia(this.getMediaConstraints())
        .then(stream => {
            this.webcamElement.srcObject = stream;
            this.webcamElement.play();
        })
        .catch(error => {
            //...
        });
        navigator.mediaDevices
        .getUserMedia({ video: true, audio: false })
        .then(function (stream) {
            webcamElement.srcObject = stream;
            webcamElement.play();
        ev.srcElement.disabled = true;
        
        })
        .catch(function (err) {
        console.log("An error occurred: " + err);
        });
        webcam.start()
            .then(result =>{
                console.log("webcam started");
            })
            .catch(err => {
                console.log(err);
            });
//    }   
   // } */
</script>

    
<%- include('../partials/footer'); -%>

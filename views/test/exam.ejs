<%- include('../partials/user-sidenav'); -%>




<!-- Main content -->
<div class="main-content" id="panel">
    <!-- Topnav -->
    <div class="container-fluid py-3 bg-primary top-padding" style="border-bottom:0.0625rem solid #e9ecef33 !important;" >
        <div class="row align-items-center">
            <div class="col col-lg-auto text-center text-sm-left">
                <h5 style="font-family: 'LakeShore', sans-serif" class="h2 text-white d-inline-block mb-0 custom-heading">Exam center</h5>
            </div>

            <div class="m-3 w-100 text-danger" style="text-align:center;position:relative;">
                <hr>
                <h5 class="text-secondary">All warnings will be displayed here</h5>
                <div id="output">
                    <h2 style="color: white;" 
                    id="text_from_script">
                </h2>

               

                 </div>
            </div>
           
            <div class="preload">
                <img src="http://i.imgur.com/KUJoe.gif">
                </div>
                
            <div class="mx-auto mb-0 text-center"> 
                <div class="container">
                    <% if(error && error.length > 0){ %>
                    <div class="alert alert-danger" role="alert">
                      <%= error %>
                    </div>
                    <% } %> <% if(success && success.length > 0){ %>
                    <div class="alert alert-success" role="alert">
                      <%= success %>
                    </div>
                    <% } %> <% if(warning && warning.length > 0){ %>
                    <div class="alert alert-warning" role="alert">
                      <%= warning %>
                    </div>
                    <% } %> <% if(info && info.length > 0){ %>
                    <div class="alert alert-info" role="alert">
                      <%= info %>
                    </div>
                    <% } %>
                  </div>
                <% if(errorMsg && errorMsg.length > 0){ %>
                    <div class="alert alert-danger fade show " role="alert">
                    <span class="alert-text mr-2">
                        <%= errorMsg %>
                    </span>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <% } %>

                <% if(successMsg && successMsg.length > 0){ %>
                <div class="alert alert-success fade show " role="alert">
                    <span class="alert-icon"><i class="ni ni-like-2"></i></span>
                    <span class="alert-text mr-2"><strong>Success!</strong>
                        <%= successMsg %>
                    </span>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <br>
                <% } %>
            </div>
         
        </div>
    </div>
    
    <!-- Header -->
    <div class="content" style="display:none;"> 
    <div class="col-md-10" style="color: white;">
        <div>Test ends in <span id="time">  <%= questions[0].settings.testDuration %>.00 </span> seconds!</div>
        <p id="date"> </p>
        <br>
        <% if(questions!=null) { %>

            <span id="x">
                <%= questions[0].settings.testDuration %>
            </span>
            
            <% for(let i=0; i < questions[0].questions.length; i++) { %> 
        <div  style="width: 100%;color: black;  background-color: #f1f1f1;" class="card">
        <form name="test" action="/test/submit-exam/<%=tests%>" method="post"> 
            <div>
                <div class="card-body">
                    <h5 class="card-title" style="color: black;">(Q<%=i+1%>) <%= questions[0].questions[i].questionText%></h5>
                </div>
                <div>
                    <div>
                        <input type="radio" name="<%=i%>"  id="" value="A"> <%= questions[0].questions[i].options[0] %>
                    </div>
                    <div>
                        <input type="radio" name="<%=i%>"  id="" value="B"> <%= questions[0].questions[i].options[1] %>
                    </div>  
                    <div>
                        <input type="radio" name="<%= i%>"  id="" value="C"> <%= questions[0].questions[i].options[2] %>
                    </div>
                    <div>
                        <input type="radio" name="<%= i%>"  id="" value="D"> <%= questions[0].questions[i].options[3] %>
                    </div>
                </div>
                       
            </div>
            
            </div>
            <% } %>      
            
            <button class="btn btn-success mb-3" id="dem" type="submit" onclick="endTest()"> END</button>
           
        </form>

        <!--
        <button class="btn btn-success mb-3" >Submit</button>
            <button  id="demo" >End </button>
            -->
    </div>
    </div>
    <div class="col-md-4"> 
   <video id="video"  class="float" autoplay>
    <canvas id="canvas"> </canvas>
    <div id="output">
        <h2 style="color: white;" 
        id="text_from_script">
    </h2>

   

     </div>
   </video>

    
    </div>
    <% } %>      

 

</div>



<script src="https://unpkg.com/@tensorflow/tfjs-converter@2.4.0/dist/tf-converter.js"></script>

<!-- You must explicitly require a TF.js backend if you're not using the tfjs union bundle. -->
<script src="https://unpkg.com/@tensorflow/tfjs-backend-webgl@2.4.0/dist/tf-backend-webgl.js"></script>
<!-- Alternatively you can use the WASM backend: <script src="https://unpkg.com/@tensorflow/tfjs-backend-wasm@2.4.0/dist/tf-backend-wasm.js"></script> -->

<!-- Require face-landmarks-detection itself. -->
<script src="https://unpkg.com/@tensorflow-models/face-landmarks-detection@0.0.1/dist/face-landmarks-detection.js"></script>


<!-- ---------------- -->

<!-- Load TensorFlow.js. This is required to use coco-ssd model. -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"> </script>

<!-- Load the coco-ssd model. -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"> </script>


<!-- Adds the CPU backend to the global backend registry 
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-cpu"></script>-->
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<style>

    .preload { 
        width:100px;
        height: 100px;
        position: fixed;
        top: 50%;
        left: 50%;
    }
.loader {
    border: 16px solid #f3f3f3;
    border-radius: 50%;
    border-top: 16px solid #3498db;
    width: 120px;
    height: 120px;
    -webkit-animation: spin 2s linear infinite; /* Safari */
    animation: spin 2s linear infinite;
  }
  
  /* Safari */
  @-webkit-keyframes spin {
    0% { -webkit-transform: rotate(0deg); }
    100% { -webkit-transform: rotate(360deg); }
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
    .float{
        position:fixed;
        width:150px;
        height:120px;
        bottom:40px;
        right:40px;
        color:#FFF;
        border-radius:10px;
        text-align:center;
        font-size:30px;
        box-shadow: 2px 2px 3px #999;
        z-index:100;
    }
</style>


<script>
    
	const quest = <%- JSON.stringify(questions) %>;
    let testid= quest[0]._id;
    let exam_time= quest[0].settings.testDuration;
    console.log("X",quest[0].settings.testDuration)
   // tf.env().set('WEBGL_CPU_FORWARD', false);
    // -- video 
    //tf.env().set('WEBGPU_CPU_FORWARD', false);
   // tf.env().set('WEBGL_CPU_FORWARD', false);
   $(function() {
    $(".preload").fadeOut(10000, function() {
        $(".content").fadeIn(12000);        
    });
});
/*
window.addEventListener("beforeunload", function (e) {
    var confirmationMessage = "\o/";
  
    (e || window.event).returnValue = confirmationMessage;     // Gecko + IE
    return confirmationMessage;                               
  }); */

 
  //document.getElementById("date").innerHTML = this.startedAt;
  
    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    

         //snap
        
     

    const constraints={
        audio:false,
        video:true
    };
     let   time= 0;
    let   test= null;
    let   questions= null;
     let   testEnded= false;
     let  result= null;
     let     isLoading= false;
     let   isTestStarted= false;
     let   redFlags= 3;
     let   socketId= null;
     let   mediaRecorder= null;
   
   let logs={};
     let   flagged= false;
     let   reason= null;
     let    startedAt= null;
     let    endedAt= null;
     let   warning= "";
     let   stream= null;
     let   userId= null;
     let    timeInterval;
  var cloudinary_photo;
     function save(){        
        
       // console.log("picure",picture)
        /*const storage = new CloudinaryStorage({
            cloudinary,
            params: {
            folder:'proctor',
            allowedFormats: ['jpg','png','jpeg'],
            
            }
            });*/
            cloud_name='dn24716of';
            upload_preset="ml_default";
            canvas.getContext('2d').drawImage(video, 0, 0, 150, 120); 
        //picture=canvas.toDataURL("image/png");

        canvas.toBlob((blob) => {
        var formdata = new FormData();
        formdata.append("file", blob);
     formdata.append("upload_preset", upload_preset);
      formdata.append("cloud_name", cloud_name);
      console.log('name of cloud',cloud_name);
        var xhr = new XMLHttpRequest();
        xhr.open(
          "POST",
          "https://api.cloudinary.com/v1_1/" + cloud_name + "/image/upload",
          false
        );
            console.log(" Uploaded")
        xhr.onload = function () {
          let response = JSON.parse(this.response);
          //cloudinary_photo.setAttribute("src", response.secure_url);
    
          console.log("ssss",response.secure_url);
          imageUrl=response.secure_url;
          //upload_response.value += this.responseText + "\n";
          axios.post('http://localhost:3000/user/save', {
            imageUrl, testid
          });
        };
    
        xhr.send(formdata);
      });
   }
    //let $ = this;
    async function init(){

        try{
            
            // video
            const stream= await navigator.mediaDevices.getUserMedia(constraints);
            console.log(stream)
            handleSuccess(stream);
            navigator.permissions.query({name: 'camera'})
            .then((permissionObj) => {
             console.log(permissionObj.state);
            })
            
            
            //face detection load
            .then(async ()=>{
                
                //facemark
                var start = window.performance.now();
                model = await faceLandmarksDetection.load(faceLandmarksDetection.SupportedPackages.mediapipeFacemesh);
                console.log(faceLandmarksDetection)
                console.log("loaded 11")
                var end = window.performance.now();

                console.log(`Execution time: ${end - start} ms`);
            })

            // prediction
            .then(async ()=>{
                
             /* const predictions = await model.estimateFaces({
                    input: document.querySelector("video")
                    });
                  console.log("predictin",predictions)*/
                  //let $ = this;
                  
                  //document.querySelector("#panel").requestFullscreen({ navigationUI: "show" });
                  //document.documentElement.requestFullscreen();
                
                  startTest();
                  
                 /* document.onkeypress = function(evt){console.log(evt)};
                 document.documentElement.requestFullscreen().then(()=>{
                    document.fullscreenEnabled=true;
                      startTest(predictions);
                     // console.log('isteststarted',this.isTestStarted);
                     // this.startedAt = new Date();
                  }).catch(err => {
                      alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
                  });*/
               // startTest(predictions);
            })
           
            .catch((error) => {
             console.log('Got error :', error);
            })
        }
        catch(e){
            console.log('Got error :', e);
        }
    }
    function handleSuccess(stream){
        window.stream=stream;
        video.srcObject=stream;

    }

    init();
    
    function calculateError(iris) {
        let sumX = -iris[0][0];
        let sumY = -iris[0][1];
        iris.slice(1,5).forEach(point => {
            sumX += point[0]/4;
            sumY += point[1]/4;
        })
       // console.log("iris",Math.pow(sumX,2)+Math.pow(sumY,2),0.5)
        return Math.pow(Math.pow(sumX,2)+Math.pow(sumY,2),0.5)
    } 
    let lookedAway='';
    // display warnings 
   
     
   let flag=1;
    function startTest(){
        this.startedAt = new Date();
     //   console.log("n:::",predictions.length)
        try {
            lookedAway="false";
          //  console.log("pehle",lookedAway)
            const facePredict = async () => {
                const predictions = await model.estimateFaces({
                    input: document.querySelector("video")
                    });

              //  console.log("no of people:",predictions.length)
              // console.log("predictin......",predictions)
                if(!predictions.length) return {lookedAway:true,numberOfPeople:predictions.length,confidence:0};
               //console.log("lookedAway",lookedAway);
                const leftCheek = predictions[0].annotations.leftCheek[0];
               // console.log(leftCheek)
                const midwayBetweenEyes = predictions[0].annotations.midwayBetweenEyes[0];
                const noseTip = predictions[0].annotations.noseTip[0];
                const leftIrisError = this.calculateError(predictions[0].annotations.leftEyeIris);
                const rightIrisError = this.calculateError(predictions[0].annotations.rightEyeIris);
             //  console.log("error", leftIrisError, rightIrisError);
                let lookedAway = false;
                if(leftIrisError+rightIrisError>0.15) {
                    lookedAway = true;
                }
                if (leftCheek[2] >= 18 || leftCheek[2] <= -18) {
                    lookedAway = true;
                } else if (midwayBetweenEyes[2] >= 5 || midwayBetweenEyes[2] <= -20 ) {
                    lookedAway = true;
                } else if (noseTip[2] > -18) {
                    lookedAway = true;
                } else {
                    lookedAway = false;
                }

              //  save();
                if(lookedAway="true"||predictions.length>1){
                    save();
                }
                return {lookedAway,numberOfPeople:predictions.length,confidence:predictions[0].faceInViewConfidence};
            }
            let ans;
            let count;
            let anst;
            let mob;

            const mobilePredict = async () => {
                const img = document.getElementById('video');
              await  cocoSsd.load().then(model => {
                    // detect objects in the image.
                    model.detect(img).then(predictions => {
                      //console.log(img)
                      //console.log('Predictions: ');
                      //console.log(predictions);
                      const mobile= predictions.some(
                                (prediction) => prediction.class === "cell phone" || "bottle"
                              );
                              console.log("mobile",mobile)
                              ans=mobile;
                              return {
                                
                                ans:mobile
                              };
                              
                    });
                    console.log(ans)
                    
                  });
                    ///.then (mod => {
                       // count=0;
                     /*   mod[0].detect(img).then(predictions => {
                           
                            console.log("aaa",predictions);
                            console.log("aaa",predictions.some(
                                (prediction) => prediction.class === "cell phone"
                              ));
                             const mobile= predictions.some(
                                (prediction) => prediction.class === "cell phone"
                              );
                              console.log("mobile",mobile)
                              
                              if(mobile){
                                  count=1;
                                  mob="true";
                              }
                              else{
                                  count=0;
                                  mob="false";
                              }                    
                            console.log("count first",count)
                            
                            console.log("anst",mob)
                            return {
                                mob,
                                count,
                                anst:mobile,
                                mobile:mobile
                              };
                    }) 
              })*/
              return {
                                
                mobile:ans
              };
            };

           

            const predict =  () => {
                // console.log("anst",mob)
                return Promise.all([ facePredict(),mobilePredict()])
                
                    .then(result => {

                        return {
                            ...result[0],
                            ...result[1]
                           
                            
                        }
                    })
            }
          // testEnded='false';
           time=0;
            const startPrediction = async() => {
                
                const result = await predict();
                
              //  console.log("Result",result)
                //console.log("logs",logs)
                
                console.log("this.time",time)
                
               
                if(!logs[time])logs[time]=[0,0,0,0];
                
               
                logs[time][0] =logs[time][0]+ result.lookedAway?1:0;
               // console.log("result 1:",logs[time][0],result.lookedAway)
                logs[time][1] += result.numberOfPeople>1?1:0;
                //console.log("result 2:",logs[time][1],result.numberOfPeople)
                logs[time][2] += result.confidence<0.8?1:0;
                logs[time][3] += result.mobile?1:0
                if(result.lookedAway||result.confidence<0.8) {
                    warning = 'Please look the screen ';
                }
                else warning = '';
                if(result.mobile) warning += 'Using such objects is not Allowed ';
                else warning += '';
                if(result.numberOfPeople>1) warning += 'More than 1 people ';
                else warning += '';
                let name="sanyaamm";
                let heading = document.getElementById('text_from_script');
                // alert(warning)
                heading.innerText = warning;
                warning = "Mr. " + warning;

                console.log("logs---",logs)
                // if(result.lookedAway ||  result.numberOfPeople>1 ||  result.confidence<0.8 || result.mobile){
                //     $.continuousFlags += 1;
                // } else {
                //     $.continuousFlags = 0;
                // }
                // if($.continuousFlags>25){
                //     $.beep.start();
                // }else{
                //     $.beep.stop();
                // }
                if(!testEnded)requestAnimationFrame(startPrediction);
            };   
           timeInterval = setInterval(() => {
            startPrediction();
            time += 1;
          }, 20*1000);
          //requestAnimationFrame(startPrediction);
        }
        catch(err){ console.log("error hai!!",err); } 
    }

   /* $("#demo").on("click", function() {
        
        let data ={logs:logs}
        console.log("logs",data)
        var xhr = new XMLHttpRequest();
        
        xhr.open('POST', '/test/submit-exam/${urlencode(tests)}');
        xhr.onload = function(data) {
            console.log('loaded', this.responseText);
        };
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify(data));
        
        this.stream.getTracks().forEach(function (track) {
            track.stop();
          });
          testEnded='false';
          
        clearInterval(timeInterval);

    });

    $('#demo').on('submit', function() {
        console.log(logs)
        this.stream.getTracks().forEach(function (track) {
            track.stop();
          });
          testEnded='false';
          
        clearInterval(timeInterval);
        $.ajax({
            type: "POST",
            url: "/test/submit-exam/${urlencode(tests)}",
            dataType: 'json',
            data: { logs: logs },
            
            success: function(data) {
                console.log("data",data)
            },
            error: function(jqXHR, textStatus, err) {
                alert('text status '+textStatus+', err '+err)
            }
        });
        
        });
  /*  const button = document.getElementById('demo');
    button.addEventListener('submit', async event => {
    let data ={logs};
    console.log("data ",data)
     let options = {
            method: 'POST',
            headers: {
                "Content-type": "application/json; "
            },
            body: JSON.stringify(data)
        }
        event.preventDefault();
        const promise = await fetch('/test/submit-exam/${urlencode(tests)}', options);
        const json =  promise.json();
        console.log(json);
      
          
    });
*/ //this.startedAt
   async function endTest() {
        
         this.endedAt = new Date();
        this.stream.getTracks().forEach(function (track) {
          track.stop();
        });
        startDate=this.startedAt;
        endDate =this.endedAt;
        testEnded='false';
        clearInterval(timeInterval);
        //console.log("logs before",logs);
       
        let data ={logs}
        let date=startDate
        let end= endDate
          console.log("logs",data)
          console.log("date",date)
          $.ajax({
            type: "POST",
            url: `http://localhost:3000/test/submit-log/<%=tests%>`,
           
            data: { logs: logs , date:date ,end:end },
            
            success: function(data) {
                console.log("data",data)
            },
            error: function(jqXHR, textStatus, err) {
                alert('text status '+textStatus+', err '+err)
            }   
        });
        /*
        let data ={logs}
          console.log("logs",data)
        let options = {
            method: 'POST',
            headers: {
                "Content-type": "application/json; "
            },
            body: JSON.stringify(data)
        }
        const promise = await  fetch('/test/submit-exam/:testid', options);
        const json = await promise.json();
         console.log(json);*/
         /* $(document).ready(function () {
            $("#demo").click(function () {
                $.post("http://localhost:3000/test/submit-exam/${tests}",
                {
                   logs:logs
                },
                function (data, status) {
                   console.log(data);
             });
            });
         });
            
      
       
        console.log("time interval stop",this.timeInterval)
       */
      }
    var x= 1;
      var timeleft = Number(exam_time)+Number(x);
      console.log(timeleft)
    var downloadTimer = setInterval(function(){
    timeleft--;
    document.getElementById("time").textContent = timeleft;
    if(timeleft <= 0)
        clearInterval(downloadTimer);
    },1000);


      window.onload=function(){ 
        console.log("auto submit")
      window.setTimeout(function() { 
          document.test.submit();
          endTest(); 
          console.log(exam_time)   
      }, ((exam_time)*1000));
      };

  /*    $(window).blur(function() {
        alert('You are not allowed to leave page blah blah');
        //do something else
     });
    */
    ////  let   logs= {logs:[{0:0,1:0,2:0,3:0}]};
</script>

